source_extractor:
  description: >
    Conduct a thourough research on finding the file name for uploaded file under uploaded_files folder.
    i need output which is like Create 2 sources filename1,filename2
    here 2 represent no.of files under the uploaded_files folder
    exclude the extension from the csv files need only name

    pass this task output to other team to get the result
  expected_output: >
    generate the text
    Ex: Create 2 sources Blotter and TP
    
  agent: source_fields

source_fields_extractor:
  description: >
    Conduct a thourough research on finding the file name for uploaded file under uploaded_files folder.
    understand the each csv files under uploaded_files and generate output.
    were i need output which contains something like this
    Create source fields for <file_name>
    <column_header1> as <data_type>,
    <column_header2> as <data_type>,
    <column_header3> as <data_type>
    ....

    here the filename that is under uploaded_files 
    and below are the column header and their corresponding DATA_TYPE
    the DATA_TYPE should be:
    BOOLEAN
    DATE
    DATE TIME
    STRING
    NUMERIC
  expected_output: >
    generate the text
    Ex: 
    Create source fields for <file_name>
    <column_header1> as <data_type1>,
    <column_header2> as <data_type2>,
    <column_header3> as <data_type3>,
    ....
    
  agent: source_fields

recon_creator:
  description: >
    create a recon using the tool  uuid ex: recon_142578852125
    type should be custom recon and  if uploaded_files folder is having more than one file then <side_name1> and <side_name2>

  expected_output: >
    generate the text
    Ex: Create recon <recon_name> type custom recon and side <side_name1> and <side_name2>

    Here <recon_name> should be unique starting with recon_
    also <side_name1> and <side_name2> are unique name stating with side_
    ex: recon_142578852125
        side_123,side_456
    
  agent: source_fields


recon_field_creator:
  description: >
    create a recon fields using source1 (which is created in source_fields_extractor task)
    were i need the output whcih looks like this
    Create recon fields similar to source1 <filename> 
    Trade ID as String,
    Trade Date as Date,
    Settlement Date as Date,
    Fund as String,
    ISIN as String,
    Quantity as Numeric, 	
    Price as Numeric,
    Amount as Numeric
    
    were <filename> is the first filename that is under uploaded_files
    and the fields are taken from the <filename>

  expected_output: >
    generate the text
    Ex: Create recon fields for <recon_name>
    <column_header1> as <data_type1>,
    <column_header2> as <data_type2>,
    <column_header3> as <data_type3>,
    ....

    Here <recon_name> is generated previously
    and column_header and data_type should be taken from 1st file
    
  agent: source_fields

recon_field_summay:
  description: >
    For the given "{user_input}" and the output from recon_field_creator:
    Note: "{user_input}" is a text input from the user, not a file.
    take first filename that is under uploaded_files

    Use the output of recon_field_creator to identify relevant column names.
    Extract matching column headers from "{user_input}" based on these identified columns.

    Then, apply the following logic:

    If "{user_input}" contains the phrase "match on":
      Extract the column names mentioned after "match on" in the user_input.
      Add these columns under the "Group By" section.

    If "{user_input}" contains the word "compare":
      Extract the column names mentioned after "compare" in the user_input.
      Check each column's data type:

      If the column is of Boolean type, add it under "compare status".
        Otherwise, add it under "compare values".


 

  expected_output: >
    generate the text
    For recon <recon_name> of side <side_name1>,<sidename2>, Map recon fields summary for 
    <column header1> as Group By 
    <column header2> as compare values
    <column header3> as compare values
    <column header4> as compare status
    ....

    here <recon_name> is something created in earlier task
    <sidename1> and <sidename2> are the sides which are mention in the previous tasks.
    <column headers> are taken from the "{user_input}" that are under uploaded_file  
  agent: source_fields

map_source_recon:
  description: >
    Map the sources were,
    sources that is nothing but the file names under uploaded_files without file extension,
    recon_name that is generated earlier and sides   
 
  expected_output: >
    generate the text
    Map sources <source_name1>, <source_name2> to recon <recon_name> with side <side1> <side2>

    here <source_name> are taken from the file_name with no extension,<recon_name> is something created in earlier task
    <sidename1> and <sidename2> are the sides which are mention in the previous tasks. 
  agent: source_fields

matching_rule:
  description: >
    For the given "{user_input}"
    create a Rule having information on sides and adding the matching conditions based on the 'match on' on column-headers.
    add match condition only for the column which are under 'match on' in "{user_input}"
 
  expected_output: >
    Create Matching Rule <rule_name>
    For Matching rule <rule_name> create a rule of type TwoSide with match status set to MATCHED. 
    Select Side One as <side_name1> and Side Two as <side_name2>. 
    Add a matching condition for <colum-header>
    
    with the match type set to Equal for recon <recon_name>  

    here <rule_name> is something uniqueId (based on DATETIME) generated rule_DATETIME,
    <side_names> are generated previously,
    <column-header> are take based on "match on" statement from "{user_input}",
    <recon_name> is take from earlier tasks.  
  
  agent: source_fields

event_creation:
  description: >
    For the given "{user_input}"
    create an Event E_randnumber(3 digits)
    using the recon_name  created earlier
 
  expected_output: >
    generate text
    Create event <event_name> for recon <recon_name>
    Set event <event_name> for every 5 minutes.

    here <event_name> is unique name starig with E_ and 3 digit randomn number ex: E_002
    and <recon_name> is something is created earlier
  
  agent: source_fields

task_executor_1:
  description: >
    Understand the source_extractor output
    ex: create source <source_name1>,<source_name2> 
    where <source_name1> and <source_name2> are taken from context of source_extractor 
  expected_output: >
    generate the output
    
  agent: source_executor

task_executor_2:
  description: >
    Understand the source_fields_extractor output
  expected_output: >
    generate the output

  agent: source_executor

task_executor_3:
  description: >
    Understand the recon_creator output
  expected_output: >
    generate the output
    
  agent: source_executor

task_executor_4:
  description: >
    Understand the recon_field_creator output 
  expected_output: >
    generate the output
    
  agent: source_executor

task_executor_5:
  description: >
    Understand the recon_field_summay output
  expected_output: >
    generate the output
    
  agent: source_executor

task_executor_6:
  description: >
    Understand the map_source_recon output
  expected_output: >
    generate the output
    
  agent: source_executor

task_executor_7:
  description: >
    Understand the matching_rule output
  expected_output: >
    generate the output
    
  agent: source_executor

task_executor_8:
  description: >
    Understand the event_creation output 
  expected_output: >
    generate the output
    
  agent: source_executor